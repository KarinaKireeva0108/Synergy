import pygame
import random
import time
import os
# Настройки игры
SCREEN_WIDTH = 800
SCREEN_HEIGHT = 600
CELL_SIZE = 40
GRID_WIDTH = SCREEN_WIDTH // CELL_SIZE
GRID_HEIGHT = SCREEN_HEIGHT // CELL_SIZE
# Цвета
GREEN = (0, 255, 0)
BROWN = (139, 69, 19)
BLUE = (0, 0, 255)
RED = (255, 0, 0)
WHITE = (255, 255, 255)
# Инициализация Pygame
pygame.init()
# Создание окна
screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
pygame.display.set_caption("Fire Fighting Game")
# Загрузка изображений
helicopter_image = pygame.image.load('helicopter.png')  # Замените на путь к вашему изображению
tree_image = pygame.image.load('tree.png')  # Замените на путь к вашему изображению
water_image = pygame.image.load('water.png')  # Замените на путь к вашему изображению
# Игровые переменные
score = 0
lives = 3
water_tank_capacity = 1
water_tank = 0
# Класс для игры
class Game:
    def __init__(self):  # Исправлено на __init__
        self.grid = [[0 for _ in range(GRID_WIDTH)] for _ in range(GRID_HEIGHT)]
        self.helicopter_pos = [GRID_WIDTH // 2, GRID_HEIGHT // 2]
        self.generate_rivers()
        self.generate_trees()
        self.fire_spread_timer = time.time()
    def generate_rivers(self):
        for _ in range(5):  # Генерация 5 рек
            x = random.randint(0, GRID_WIDTH - 1)
            y = random.randint(0, GRID_HEIGHT - 1)
            self.grid[y][x] = 'W'  # W - река
    def generate_trees(self):
        for _ in range(10):  # Генерация 10 деревьев
            x = random.randint(0, GRID_WIDTH - 1)
            y = random.randint(0, GRID_HEIGHT - 1)
            if self.grid[y][x] == 0:  # Если клетка пустая
                self.grid[y][x] = 'T'  # T - дерево
    def draw(self):
        screen.fill(WHITE)
        for y in range(GRID_HEIGHT):
            for x in range(GRID_WIDTH):
                if self.grid[y][x] == 'W':
                    screen.blit(water_image, (x * CELL_SIZE, y * CELL_SIZE))
                elif self.grid[y][x] == 'T':
                    screen.blit(tree_image, (x * CELL_SIZE, y * CELL_SIZE))
        # Отрисовка вертолета
        helicopter_x, helicopter_y = self.helicopter_pos
        screen.blit(helicopter_image, (helicopter_x * CELL_SIZE, helicopter_y * CELL_SIZE))
        # Отображение счета и жизней
        font = pygame.font.Font(None, 36)
        score_text = font.render(f'Score: {score}', True, (0, 0, 0))
        lives_text = font.render(f'Lives: {lives}', True, (0, 0, 0))
        screen.blit(score_text, (10, 10))
        screen.blit(lives_text, (10, 50))
        pygame.display.flip()
    def update(self):
        # Логика игры (пожар, жизнь дерева и т.д.)
        pass
    def run(self):
        clock = pygame.time.Clock()
        running = True
        while running:
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    running = False
            keys = pygame.key.get_pressed()
            if keys[pygame.K_UP]:
                self.helicopter_pos[1] -= 1
            if keys[pygame.K_DOWN]:
                self.helicopter_pos[1] += 1
            if keys[pygame.K_LEFT]:
                self.helicopter_pos[0] -= 1
            if keys[pygame.K_RIGHT]:
self.helicopter_pos[0] += 1
            # Проверка границ экрана
            self.helicopter_pos[0] = max(0, min(GRID_WIDTH - 1, self.helicopter_pos[0]))
            self.helicopter_pos[1] = max(0, min(GRID_HEIGHT - 1, self.helicopter_pos[1]))
            self.update()
            self.draw()
            clock.tick(60)  # FPS
# Запуск игры
if __name__ == "__main__":  # Исправлено на __name__
    game_instance = Game()
    game_instance.run()
    pygame.quit()
